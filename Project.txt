Include irvine32.inc
Include macros.inc

BUFFER_SIZE = 1000000

.data
    arr         BYTE  'M', 'B', 'E', 'A', 'C', 'H', 'T', 'R', 'A', 'J'
                BYTE  'F', 'E', 'H', 'T', 'E', 'K', 'C', 'O', 'R', 'O'
                BYTE  'A', 'O', 'M', 'R', 'G', 'A', 'Y', 'A', 'E', 'K'
                BYTE  'S', 'T', 'R', 'E', 'S', 'H', 'C', 'R', 'E', 'E'
                BYTE  'T', 'A', 'W', 'M', 'M', 'A', 'D', 'L', 'W', 'R'                
                BYTE  'U', 'E', 'R', 'P', 'Q', 'N', 'D', 'S', 'S', 'T'
                BYTE  'F', 'I', 'S', 'M', 'A', 'I', 'L', 'E', 'N', 'O'
                BYTE  'F', 'L', 'Y', 'T', 'I', 'G', 'E', 'R', 'A', 'T'
    space BYTE  "  ", 0
    space1 BYTE  "                                                        ", 0
    space2 BYTE "                                                                               ",0 
    temp DWORD ?
    rows  DWORD 8
    cols  DWORD 10
    check DWORD 1
    Lives DWORD 3
    project BYTE " ",0
name1 BYTE "                          22k-4180 MUHAMMAD AHAN ALI ",0
name2 BYTE "                         22K-4225 MUHAMMAD ISMAIL AWAN ",0
name2 BYTE "                         22K-4222 AYAN EJAZ ",0

    load BYTE "                          PLEASE WAIT WHILE LOADING: ",0
    loading_success BYTE "                           CONTENT LOADED SUCCESSFULLY",0
    msg1 byte "                                                               Enter any word you want to search : ",0
    msg2 byte "                                                                     The word doesn't found",0
    msg3 byte "                                         The word found",0
    userInput byte 10 DUP (0)
    lengthofArr dword 80
    tempForUserCountNo dword 0
    SavingESI dword ?
    LengthofUserInput dword ?
    score dword 0
    t2 dword 0
    msgA byte "                                                        The word you entered is in Right Diagonal",0
    msgB byte "                                                        The word you entered is present Downward",0
    msgC byte "                                                        The word you entered is present Left to Right",0
    msgD byte "                                                        The word you entered is in Backword left Diagonal",0
    msgE byte "                                                        The word you entered is present Upward",0
    msgF byte "                                                        The word you entered is present Right to left",0
    msgG byte "                                                        The word you entered is in Left Diagonal Downward",0
    msgH byte "                                                        The word you entered is in Backword Right Diagonal",0
    msgI byte "                                                        The length of string cannot be greater then 8",0
    repo byte "                                                               Enter any number to continue and zero(0) to exit:",0
    menu1 byte "                                                                      1.Quick Play ",0
    menu2 byte "                                                                      2.See SCORE ",0
    menu3 byte "                                                                      3.QUIT ",0
    indexStored dword 8 DUP (?)
    comma byte ","
   
    char BYTE 4 Dup("0")

    ;FILLING 
    filename byte "score.txt",0
BUFFER_SIZE = 1024
fileHandle HANDLE ?
NameTag dword "0",0
NextLine byte 0dh,0ah
bytesWritten dword ?
buffer BYTE BUFFER_SIZE DUP(?)
tempRead byte BUFFER_SIZE dup (?)
bytesRead dword ?
    

.code
main PROC
     
    call clrscr
    mov eax,WHITE*18
    call settextcolor
      
	  
	  call clrscr

      Again:
CALL CLRSCR
mWrite<"                                                                __  __ _____ _   _ _   _ ",0dh,0ah>
mWrite<"			                                       |  \/  | ____| \ | | | | |",0dh,0ah>
mWrite<"				                               | |\/| |  _| |  \| | | | |",0dh,0ah>
mWrite<"			                                       | |  | | |___| |\  | |_| |",0dh,0ah>
mWrite<"			                                       |_|  |_|_____|_| \_|\___/ ",0dh,0ah>
call crlf
call crlf
call crlf
mWrite<"------------------------------------------------------------------------------------------------------------------------------------------------------------",0dh,0ah>
call crlf
call crlf
call crlf
call crlf
mov edx,offset menu1
call writestring
call crlf
mov edx,offset menu2
call writestring
call crlf
mov edx,offset menu3
call writestring
call crlf
call crlf
call crlf
call crlf
mWrite<"------------------------------------------------------------------------------------------------------------------------------------------------------------",0dh,0ah>
call crlf
call crlf
call crlf
call crlf
mWrite<"                                                                      Enter Choice:",0>
mov eax,0
call readdec

cmp al,1
jne next
call clrscr

call loading

call Quick_play

jmp Again
jmp quit

next:
cmp al,2
jne next3
      mWrite<"Scores :",0ah,0dh>
      call read_file
	  call crlf
jmp quit

next3:
cmp al,3
jne next4
mov check,0
jmp Quit1

next4:
call crlf
call crlf
mWrite <"                                                         You Enter Invalid Number",0dh,0ah>
mov eax,500
call delay
jmp Again
quit:

call readdec
cmp check,0
jne Again

Quit1:
  


    
    
    exit

main ENDP


Quick_play PROC


call clrscr
    mov esi, OFFSET arr   ; ESI points to the start of the 2D array
    mov ecx, rows         ; ECX is the number of rows
    call crlf
    call crlf
    call crlf
    call crlf
    call crlf
    call crlf
     mWrite <"                                 Lives : ",0>
    mov eax,Lives
    call writedec
    mWrite <"                                         ",0>
    mWrite <"                            Score : ",0>
    mov eax,score
    call writedec
    mov NameTag,eax 
    call crlf
    call crlf
    
    call crlf
    call crlf
print_rows:
    mov edx, cols          ; Set the number of columns for each row
    call print_row        ; Call a function to print the row
    loop print_rows       ; Continue until all rows are printed

    R1::
   call crlf
    call crlf
    call crlf
    call crlf

    mov edx,offset msg1
    call writestring
    mov edx,offset userInput
    mov ecx,lengthof userInput -1
    call readstring
    

    ; Calculate the length of the string manually
    mov eax, 0
    mov esi, OFFSET userInput
    count_characters:
    cmp byte ptr [esi], 0
    je done
    inc eax
    inc esi
    jmp count_characters

    done:
    cmp eax,9
    jl t1
    mov edx,offset msgI
    CALL crlf
    call writestring
    CALL crlf
    jmp R1
    
    t1:
     mov LengthOfUserInput,eax
    call SearchWord
   
    call WaitMsg           ; Wait for a key press before exiting
    
Quick_play endp
print_row PROC
    mov temp,ecx
    mov ecx, cols
   
   mWrite <"         ",0>
   MOV EDX,offset space1
        call writestring
    print_cols:
        
        movzx eax, byte ptr [esi]  ; Load the current byte from the array
        call WriteChar              ; Print the character
        mov edx, OFFSET space
        call WriteString           ; Print a space between elements
        inc esi                     ; Move to the next byte in the array
        loop print_cols             ; Continue until all columns are printed
        mov ecx,temp
    call Crlf                       ; Move to the next line
    ret
print_row ENDP

SearchWord PROC

;mov ebx,lengthOfUserInput
;sub ebx,1

mov ecx,lengthofArr
mov edi,0
mov al,userInput[edi]
mov edx,0
mov esi,0
jmp l1

again:
mov ecx,lengthofArr
mov edi,0
mov al,userInput[edi]
mov edx,ebx
mov esi,0

l1:
    cmp al, arr[edx]
    JE saveESI

    cmp edx,lengthofArr - 1
    jGE process

    inc edx
    loop l1

saveESI:
    mov SavingESI,edx
    mov indexStored[esi],edx
    add esi,type indexStored
    jmp step2a

step2a:

inc edx
inc edi
mov al,userInput[edi]
cmp al,arr[edx]
JE resumeA
jmp restart1

resumeA:
mov indexStored[esi],edx
add esi,type indexStored
add tempForUserCountNo,1
mov ebx,lengthofUserInput
dec ebx
cmp tempForUserCountNo, ebx
JE messageA
jmp step2a
messageA:
mov edx ,offset msgC
call writestring
jmp found


restart1:
mov tempForUserCountNo,0
mov edx,SavingESI
mov esi,0
mov indexStored[esi],edx
add esi,type indexStored
mov edi,0
jmp step2b

step2b:
inc edi
add edx,11
mov al,userInput[edi]
cmp al,arr[edx]
JE resumeB
jmp restart2

resumeB:
mov indexStored[esi],edx
add esi,type indexStored
add tempForUserCountNo,1
mov ebx,lengthofUserInput
dec ebx
cmp tempForUserCountNo, ebx
JE messageB
jmp step2b
messageB:
mov edx ,offset msgA
call writestring
jmp found


restart2:
mov tempForUserCountNo,0
mov edx,SavingESI
mov esi,0
mov indexStored[esi],edx
add esi,type indexStored
mov edi,0
jmp step2c

step2c:
inc edi
add edx,10
mov al,userInput[edi]
cmp al,arr[edx]
JE resumeC
jmp restart3

resumeC:
mov indexStored[esi],edx
add esi,type indexStored
add tempForUserCountNo,1
mov ebx,lengthofUserInput
dec ebx
cmp tempForUserCountNo, ebx
JE messageC
jmp step2c
messageC:
mov edx ,offset msgB
call writestring
jmp found

restart3:
mov tempForUserCountNo,0
mov edx,SavingESI
mov esi,0
mov indexStored[esi],edx
add esi,type indexStored
mov edi,0
jmp step2d


step2d:          ;for backword left
sub edx,1
inc edi
mov al,userInput[edi]
cmp al,arr[edx]
JE resumeD
jmp restart4

resumeD:
mov indexStored[esi],edx
add esi,type indexStored
add tempForUserCountNo,1
mov ebx,lengthofUserInput
dec ebx
cmp tempForUserCountNo, ebx
JE messageD
jmp step2d
messageD:
mov edx ,offset msgF
call writestring
jmp found

restart4:
mov tempForUserCountNo,0
mov edx,SavingESI
mov esi,0
mov indexStored[esi],edx
add esi,type indexStored
mov edi,0
jmp step2e


step2e:    ;for backward upward
inc edi
sub edx,10
mov al,userInput[edi]
cmp al,arr[edx]
JE resumeE
jmp restart5

resumeE:
mov indexStored[esi],edx
add esi,type indexStored
add tempForUserCountNo,1
mov ebx,lengthofUserInput
dec ebx
cmp tempForUserCountNo, ebx
JE messageE
jmp step2e
messageE:
mov edx ,offset msgE
call writestring
jmp found

restart5:
mov tempForUserCountNo,0
mov edx,SavingESI
mov esi,0
mov indexStored[esi],edx
add esi,type indexStored
mov edi,0
jmp step2f

step2f:      ;for backward diagonal
inc edi
sub edx,11
mov al,userInput[edi]
cmp al,arr[edx]
JE resumeF
jmp restart6

resumeF:
mov indexStored[esi],edx
add esi,type indexStored
add tempForUserCountNo,1
mov ebx,lengthofUserInput
dec ebx
cmp tempForUserCountNo, ebx
JE messageF
jmp step2f
messageF:
mov edx ,offset msgD
call writestring
jmp found

restart6:
mov tempForUserCountNo,0
mov edx,SavingESI
mov esi,0
mov indexStored[esi],edx
add esi,type indexStored
mov edi,0
jmp step2g

step2g:
inc edi
add edx,9
mov al,userInput[edi]
cmp al,arr[edx]
JE resumeG
jmp restart7

resumeG:
mov indexStored[esi],edx
add esi,type indexStored
add tempForUserCountNo,1
mov ebx,lengthofUserInput
dec ebx
cmp tempForUserCountNo, ebx
JE messageG
jmp step2g
messageG:
call crlf
mov edx ,offset msgG
call writestring
jmp found


restart7:
mov tempForUserCountNo,0
mov edx,SavingESI
mov esi,0
mov indexStored[esi],edx
add esi,type indexStored
mov edi,0
jmp step2h

step2h:
inc edi
sub edx,9
mov al,userInput[edi]
cmp al,arr[edx]
JE resumeH
jmp notFound

resumeH:
mov indexStored[esi],edx
add esi,type indexStored
add tempForUserCountNo,1
mov ebx,lengthofUserInput
dec ebx
cmp tempForUserCountNo, ebx
JE messageH
jmp step2h
messageH:
call crlf
mov edx ,offset msgH
call writestring
jmp found


notFound:
mov ebx,SavingESI
inc ebx
mov edi,0
mov al,userInput[edi]


l10:
cmp al,arr[ebx]
JE again
cmp ebx,lengthOfArr - 1
jG process
inc ebx
loop l10

process:
sub Lives,1
call crlf
call crlf
mov edx,offset msg2
call writestring
jmp exitt

found:
call crlf
add score,1

mov ecx,lengthof indexStored
mov ebx,0


l100:
mov eax,indexStored[ebx]

cmp eax,0
JE continue1

continue2:
CALL CRLF 
CALL CRLF
MOV EDX,OFFSET space2
call writestring

mov eax,indexStored[ebx]
call writedec

mov edx,offset space
call writestring
add ebx,type indexStored
CALL write_file
loop l100


continue1:
mov edx,ebx
add edx,4
mov eax,indexStored[edx]
cmp eax,0
jE exitt

jmp continue2


exitt:

call crlf

MOV tempForUserCountNo,0
mov LengthOfUserInput,0
mov SavingESI,0
mov esi,0
mov ecx,10

x1:
mov indexStored[esi],0
ADD esi,4
loop x1
CALL CRLF 
CALL CRLF
MOV EDX,offset space1
call writestring
call WaitMsg           ; Wait for a key press before exiting
CALL CLRSCR
call crlf
call crlf
call crlf
call crlf
mWrite <"                                                                   SEARCH THE NEXT WORD !!!",0dh,0ah>

mov eax,2000
call delay

cmp Lives,0
jne Quick_play

ret

SearchWord ENDP

read_file proc
INVOKE CreateFile,ADDR fileName,GENERIC_READ,DO_NOT_SHARE,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,0

mov fileHandle, eax

INVOKE setfilepointer, filehandle, 0,0, FILE_BEGIN

INVOKE ReadFile,fileHandle,ADDR tempRead,1024,ADDR bytesRead,0

mov edx, offset tempread
call writestring
call crlf
INVOKE CloseHandle, fileHandle
ret
read_file endp


write_file PROC
mov eax,score
mov t2,eax
ADD t2,48

mov edx,t2 
MOV NameTag[0],edx


INVOKE CreateFile,ADDR fileName,GENERIC_WRITE+GENERIC_READ,DO_NOT_SHARE,NULL,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL,0
mov fileHandle,eax
INVOKE SetFilePointer,fileHandle,0,0,FILE_END
INVOKE WriteFile, fileHandle,ADDR NameTag, SIZEOF NameTag,ADDR bytesWritten,NULL
INVOKE WriteFile, fileHandle,ADDR NextLine, SIZEOF NextLine,ADDR bytesWritten,NULL
INVOKE CloseHandle, fileHandle
ret
write_file endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  loading
loading proc
	call clrscr
	mov ecx,50
	mov dh, 15
	mov dl, 39
	call gotoxy
	mov edx,offset load
	call writestring
	mov dh, 17
	mov dl, 54
	l1:
		call gotoxy
		mov eax, 25
		call delay
		mov eax, 219
		call writechar
		inc dl
	loop l1
	mov dh, 20
	mov dl, 38
	call gotoxy
	mov edx,offset loading_success
	call writestring
	call crlf
	mov eax, 2000
	call delay
	call clrscr

	mov dh, 7
	mov dl, 44
	call gotoxy
	mov edx,offset project
	call writestring
	mov eax,500
   
   call crlf
   call crlf
	mov eax,1200
	mov dh, 11
	mov dl, 41
	call gotoxy
	mov edx,offset name1
	call writestring

	call delay
	mov dh, 13
	mov dl, 41
	call gotoxy
	mov edx,offset name2
	call writestring

	call delay
	mov dh, 13
	mov dl, 41
	call gotoxy
	mov edx,offset name3
	call writestring
call crlf
call crlf

   

	mov eax,1000
    CALL crlf
    call crlf

call delay
call delay
ret 
loading endp
END main
